!function(t){function e(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var o={};e.m=t,e.c=o,e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}(o(1))},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=o(2);o(3);var a=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItem=null,o.sortItem=null,o.sortDirection=null,o.text="",o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return n(e,t),e.prototype.componentDidMount=function(){this.forceUpdate()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.render=function(){for(var t,e=manywho.model.getComponent(this.componentId,this.flowKey),o=(manywho.state.getComponent(this.componentId,this.flowKey),manywho.model.getOutcomes(this.componentId,this.flowKey)),n=[],a=[],i=0;i<o.length;i++){var l=o[i];if(l.isBulkAction){var s=l.attributes.icon||"wrench",c="glyphicon glyphicon-"+s+" et-button-bar-button";n.push(r.createElement("span",{className:c,onClick:this.triggerOutcome.bind(this),title:l.label}))}else switch(l.attributes.action){case"CLICK":l.id;break;case"DOUBLE-CLICK":t=l.id;break;default:var s=l.attributes.icon||"wrench",c="glyphicon glyphicon-"+s+" et-button-bar-button",u=r.createElement("span",{className:c,onClick:this.triggerOutcome.bind(this,l.id),title:l.label});a.push(u)}}var m,p=null;e.label&&e.label.length>0&&(p=r.createElement("span",null,e.label)),m=r.createElement("div",{className:"et-caption-div"},r.createElement("div",{className:"et-caption"},p),r.createElement("div",{className:"et-button-bar"},n));var h,d,b,f=[],y=[],g=[],w=0,v=[];for(a&&a.length>0&&f.push(r.createElement("td",{className:"et-table-header"})),w=0;w<e.columns.length;w++){var E,O=e.columns[w].developerName;E=this.sortItem&&this.sortItem==O?"DESC"==this.sortDirection?r.createElement("span",{className:"glyphicon glyphicon-arrow-down"}):r.createElement("span",{className:"glyphicon glyphicon-arrow-up"}):null,g[e.columns[w].developerName]=e.columns[w];var D=r.createElement("th",{className:"et-table-header","data-column-name":O,onClick:this.sort.bind(this)},r.createElement("div",null,r.createElement("div",{style:{float:"left"}},r.createElement("span",null,e.columns[w].label)),r.createElement("div",{style:{float:"right"}},E)));f.push(D)}for(w=0;w<e.objectData.length;w++){d=e.objectData[w],b=manywho.utils.getObjectDataProperty(d.properties,this.getAttribute("Row Key")).contentValue,v=[],v.push(r.createElement("td",{className:"et-table-cell"},a));for(var I=0;I<d.properties.length;I++)(h=g[d.properties[I].developerName])&&h.isDisplayValue&&v.push(r.createElement("td",{className:"et-table-cell"},d.properties[I].contentValue));var c="et-table-row";this.selectedItem&&this.selectedItem==b&&(c+=" et-table-row-selected");var N=r.createElement("tr",{className:c,"data-rowId":b,"data-objectData":d,onClick:this.selectRow.bind(this),onDoubleClick:this.triggerOutcome.bind(this,t)},v);y.push(N)}var C=r.createElement("div",{className:"et-table-div"},r.createElement("table",{className:"et-table"},r.createElement("thead",{className:"et-table-head"},r.createElement("tr",{className:"et-table-header-row"},f)),r.createElement("tbody",{className:"et-table-body"},y)));return r.createElement("div",{className:"et"},m,C)},e.prototype.selectRow=function(t){this.selectedItem=t.currentTarget.getAttribute("data-rowId"),this.forceUpdate()},e.prototype.doubleClickRow=function(t){var e=t.currentTarget.getAttribute("data-rowId")||t.currentTarget.parentElement.parentElement.getAttribute("data-rowId"),o=manywho.model.getComponent(this.componentId,this.flowKey),n=this.getAttribute("Row Key"),r=this.getObjectDataByKey(o.objectData,n,e);r=JSON.parse(JSON.stringify(r)),r.isSelected=!0;var a={objectData:[r]};if(manywho.state.setComponent(this.componentId,a,this.flowKey,!0),r){var i=this.getAttribute("Double Click Outcome Id");if(i){var l=manywho.model.getOutcome(i,this.flowKey);l&&manywho.component.onOutcome(l,null,this.flowKey)}}this.forceUpdate()},e.prototype.triggerOutcome=function(t,e){var o=e.currentTarget.getAttribute("data-rowId")||e.currentTarget.parentElement.parentElement.getAttribute("data-rowId"),n=manywho.model.getComponent(this.componentId,this.flowKey),r=this.getAttribute("Row Key"),a=this.getObjectDataByKey(n.objectData,r,o);a=JSON.parse(JSON.stringify(a)),a.isSelected=!0;var i={objectData:[a]};if(manywho.state.setComponent(this.componentId,i,this.flowKey,!0),a&&t){var l=manywho.model.getOutcome(t,this.flowKey);l&&manywho.component.onOutcome(l,null,this.flowKey)}this.forceUpdate()},e.prototype.sort=function(t){this.sortItem=t.currentTarget.getAttribute("data-column-name"),this.sortDirection&&"ASC"==this.sortDirection?this.sortDirection="DESC":this.sortDirection="ASC",this.forceUpdate()},e.prototype.getObjectDataByKey=function(t,e,o){for(var n,r=0;r<t.length;r++)if(n=t[r],manywho.utils.getObjectDataProperty(n.properties,e).contentValue==o)return n;return null},e}(r.Component);manywho.component.register("EnhancedTable",a),e.default=a},function(t,e){t.exports=React},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,