!function(e){function t(n){if(o[n])return o[n].exports;var a=o[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var o={};t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o(1))},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var a=o(2);o(3);var r=function(e){function t(t){var o=e.call(this,t)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItems=[],o.sortItem=null,o.sortDirection=null,o.text="",o.componentId=t.id,o.flowKey=t.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var a in n.attributes)o.attributes[a]=n.attributes[a];return o}return n(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.componentDidUpdate=function(){},t.prototype.getAttribute=function(e){return this.attributes[e]?this.attributes[e]:null},t.prototype.render=function(){for(var e,t,o=manywho.model.getComponent(this.componentId,this.flowKey),n=(manywho.state.getComponent(this.componentId,this.flowKey),manywho.model.getOutcomes(this.componentId,this.flowKey)),r=[],l=[],s=0;s<n.length;s++){var i=n[s];if(i.isBulkAction){var c=i.attributes.icon||"wrench",u="glyphicon glyphicon-"+c+" et-button-bar-button";r.push(a.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,i.id),title:i.label}))}else switch(i.attributes.action){case"CLICK":t=i.id;break;case"DOUBLE-CLICK":if(0==o.isMultiSelect)e=i.id;else{var c=i.attributes.icon||"log-in",u="glyphicon glyphicon-"+c+" et-button-bar-button";r.push(a.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,i.id),title:i.label}))}break;default:if(0==o.isMultiSelect){var c=i.attributes.icon||"wrench",u="glyphicon glyphicon-"+c+" et-button-bar-button",m=a.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,i.id),title:i.label});l.push(m)}else{var c=i.attributes.icon||"wrench",u="glyphicon glyphicon-"+c+" et-button-bar-button";r.push(a.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,i.id),title:i.label}))}}}var h,p=null;o.label&&o.label.length>0&&(p=a.createElement("span",null,o.label)),h=a.createElement("div",{className:"et-caption-div"},a.createElement("div",{className:"et-caption"},p),a.createElement("div",{className:"et-button-bar"},r));var d,b,f,y=[],g=[],v=[],w=0,E=[];for(o.isMultiSelect&&y.push(a.createElement("td",{className:"et-table-header-checkbox"},a.createElement("input",{className:"et-table-checkbox",type:"checkbox",onClick:this.toggleSelectAll.bind(this)}))),l&&l.length>0&&y.push(a.createElement("td",{className:"et-table-header"})),w=0;w<o.columns.length;w++){var I,O=o.columns[w].developerName;I=this.sortItem&&this.sortItem==O?"DESC"==this.sortDirection?a.createElement("span",{className:"glyphicon glyphicon-arrow-down"}):a.createElement("span",{className:"glyphicon glyphicon-arrow-up"}):null,v[o.columns[w].developerName]=o.columns[w];var N=a.createElement("th",{className:"et-table-header","data-column-name":O,onClick:this.sort.bind(this)},a.createElement("div",null,a.createElement("div",{style:{float:"left"}},a.createElement("span",null,o.columns[w].label)),a.createElement("div",{style:{float:"right"}},I)));y.push(N)}if(o.objectData)for(w=0;w<o.objectData.length;w++){b=o.objectData[w],f=manywho.utils.getObjectDataProperty(b.properties,this.getAttribute("Row Key")).contentValue,E=[];var C;C=!(this.selectedItems.indexOf(f)<0),o.isMultiSelect?E.push(a.createElement("td",{className:"et-table-cell-checkbox"},a.createElement("input",{className:"et-table-checkbox",type:"checkbox",checked:C,onClick:this.toggleSelectItem.bind(this)}))):l.length>0&&E.push(a.createElement("td",{className:"et-table-cell"},l));for(var D=0;D<b.properties.length;D++)if((d=v[b.properties[D].developerName])&&d.isDisplayValue)if(""==d.componentType)E.push(a.createElement("td",{className:"et-table-cell"},b.properties[D].contentValue));else{var k=a.createElement(manywho.component.getByName(d.componentType),b.properties[D],null);E.push(a.createElement("td",{className:"et-table-cell"},k))}var u="et-table-row";this.selectedItems&&this.selectedItems.indexOf(f)>=0&&(u+=" et-table-row-selected");var j="";j=1==o.isMultiSelect?"Click to select, Double-Click to open":"Click to select";var x=a.createElement("tr",{className:u,"data-rowId":f,"data-objectData":b,onClick:this.selectRow.bind(this,t),onDoubleClick:this.triggerOutcome.bind(this,e),title:j},E);g.push(x)}else{var x=a.createElement("tr",{className:u},a.createElement("td",{colSpan:Object.keys(v).length},"No Work Items"));g.push(x)}var K=a.createElement("div",{className:"et-table-div"},a.createElement("table",{className:"et-table"},a.createElement("thead",{className:"et-table-head"},a.createElement("tr",{className:"et-table-header-row"},y)),a.createElement("tbody",{className:"et-table-body"},g)));return a.createElement("div",{className:"et"},h,K)},t.prototype.triggerOutcome=function(e,t){if(e&&!(e.length<1)){var o,n,a=manywho.model.getComponent(this.componentId,this.flowKey),r=this.getAttribute("Row Key"),l=[];for(var s in this.selectedItems)n=this.getObjectDataByKey(a.objectData,r,this.selectedItems[s]),n=JSON.parse(JSON.stringify(n)),n.isSelected=!0,l.push(n);if(o={objectData:l},manywho.state.setComponent(this.componentId,o,this.flowKey,!0),l&&e){var i=manywho.model.getOutcome(e,this.flowKey);i&&manywho.component.onOutcome(i,l,this.flowKey)}this.forceUpdate()}},t.prototype.sort=function(e){this.sortItem=e.currentTarget.getAttribute("data-column-name"),this.sortDirection&&"ASC"==this.sortDirection?this.sortDirection="DESC":this.sortDirection="ASC",this.forceUpdate()},t.prototype.toggleSelectAll=function(e){if(e.currentTarget.checked)for(var t=manywho.model.getComponent(this.componentId,this.flowKey),o=0;o<t.objectData.length;o++){var n=t.objectData[o],a=manywho.utils.getObjectDataProperty(n.properties,this.getAttribute("Row Key")).contentValue;this.selectedItems.indexOf(a)<0&&this.selectedItems.push(a)}else this.selectedItems=[];return this.forceUpdate(),!1},t.prototype.selectRow=function(e,t){0==manywho.model.getComponent(this.componentId,this.flowKey).isMultiSelect&&(this.selectedItems=[]),this.selectedItems.indexOf(t.currentTarget.getAttribute("data-rowId"))<0&&this.selectedItems.push(t.currentTarget.getAttribute("data-rowId")),this.triggerOutcome(e,t),this.forceUpdate()},t.prototype.toggleSelectItem=function(e){var t=e.currentTarget.getAttribute("data-rowId")||e.currentTarget.parentElement.parentElement.getAttribute("data-rowId");if(this.selectedItems.indexOf(t)<0)this.selectedItems.push(t);else{var o=this.selectedItems.indexOf(t);this.selectedItems.splice(o,1)}e.stopPropagation(),this.forceUpdate()},t.prototype.getObjectDataByKey=function(e,t,o){for(var n,a=0;a<e.length;a++)if(n=e[a],manywho.utils.getObjectDataProperty(n.properties,t).contentValue==o)return n;return null},t}(a.Component);manywho.component.register("EnhancedTable",r),t.default=r},function(e,t){e.exports=React},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,