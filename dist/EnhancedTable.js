!function(e){function t(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var o={};t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o(1))},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=o(2);o(3);var a=function(e){function t(t){var o=e.call(this,t)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItems=[],o.sortItem=null,o.sortDirection=null,o.text="",o.componentId=t.id,o.flowKey=t.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return n(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.componentDidUpdate=function(){},t.prototype.getAttribute=function(e){return this.attributes[e]?this.attributes[e]:null},t.prototype.render=function(){for(var e,t,o=manywho.model.getComponent(this.componentId,this.flowKey),n=(manywho.state.getComponent(this.componentId,this.flowKey),manywho.model.getOutcomes(this.componentId,this.flowKey)),a=[],i=[],s=0;s<n.length;s++){var l=n[s];if(l.isBulkAction){var c=l.attributes.icon||"wrench",u="glyphicon glyphicon-"+c+" et-button-bar-button";a.push(r.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,l.id),title:l.label}))}else switch(l.attributes.action){case"CLICK":t=l.id;break;case"DOUBLE-CLICK":if(0==o.isMultiSelect)e=l.id;else{var c=l.attributes.icon||"log-in",u="glyphicon glyphicon-"+c+" et-button-bar-button";a.push(r.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,l.id),title:l.label}))}break;default:if(0==o.isMultiSelect){var c=l.attributes.icon||"wrench",u="glyphicon glyphicon-"+c+" et-button-bar-button",h=r.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,l.id),title:l.label});i.push(h)}else{var c=l.attributes.icon||"wrench",u="glyphicon glyphicon-"+c+" et-button-bar-button";a.push(r.createElement("span",{className:u,onClick:this.triggerOutcome.bind(this,l.id),title:l.label}))}}}var p,m=null;o.label&&o.label.length>0&&(m=r.createElement("span",null,o.label)),p=r.createElement("div",{className:"et-caption-div"},r.createElement("div",{className:"et-caption"},m),r.createElement("div",{className:"et-button-bar"},a));var d,b,f,y=[],g=[],v=[],w=0,I=[];for(o.isMultiSelect&&y.push(r.createElement("td",{className:"et-table-header-checkbox"},r.createElement("input",{className:"et-table-checkbox",type:"checkbox",onClick:this.toggleSelectAll.bind(this)}))),i&&i.length>0&&y.push(r.createElement("td",{className:"et-table-header"})),w=0;w<o.columns.length;w++){var E,O=o.columns[w].developerName;E=this.sortItem&&this.sortItem==O?"DESC"==this.sortDirection?r.createElement("span",{className:"glyphicon glyphicon-arrow-down"}):r.createElement("span",{className:"glyphicon glyphicon-arrow-up"}):null,v[o.columns[w].developerName]=o.columns[w];var N=r.createElement("th",{className:"et-table-header","data-column-name":O,onClick:this.sort.bind(this)},r.createElement("div",null,r.createElement("div",{style:{float:"left"}},r.createElement("span",null,o.columns[w].label)),r.createElement("div",{style:{float:"right"}},E)));y.push(N)}for(w=0;w<o.objectData.length;w++){b=o.objectData[w],f=manywho.utils.getObjectDataProperty(b.properties,this.getAttribute("Row Key")).contentValue,I=[];var C;C=!(this.selectedItems.indexOf(f)<0),o.isMultiSelect?I.push(r.createElement("td",{className:"et-table-cell-checkbox"},r.createElement("input",{className:"et-table-checkbox",type:"checkbox",checked:C,onClick:this.toggleSelectItem.bind(this)}))):I.push(r.createElement("td",{className:"et-table-cell"},i));for(var D=0;D<b.properties.length;D++)(d=v[b.properties[D].developerName])&&d.isDisplayValue&&I.push(r.createElement("td",{className:"et-table-cell"},b.properties[D].contentValue));var u="et-table-row";this.selectedItems&&this.selectedItems.indexOf(f)>=0&&(u+=" et-table-row-selected");var k="";k=1==o.isMultiSelect?"Click to select, Double-Click to open":"Click to select";var x=r.createElement("tr",{className:u,"data-rowId":f,"data-objectData":b,onClick:this.selectRow.bind(this,t),onDoubleClick:this.triggerOutcome.bind(this,e),title:k},I);g.push(x)}var K=r.createElement("div",{className:"et-table-div"},r.createElement("table",{className:"et-table"},r.createElement("thead",{className:"et-table-head"},r.createElement("tr",{className:"et-table-header-row"},y)),r.createElement("tbody",{className:"et-table-body"},g)));return r.createElement("div",{className:"et"},p,K)},t.prototype.triggerOutcome=function(e,t){if(e&&!(e.length<1)){var o,n,r=manywho.model.getComponent(this.componentId,this.flowKey),a=this.getAttribute("Row Key"),i=[];for(var s in this.selectedItems)n=this.getObjectDataByKey(r.objectData,a,this.selectedItems[s]),n=JSON.parse(JSON.stringify(n)),n.isSelected=!0,i.push(n);if(o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0),i&&e){var l=manywho.model.getOutcome(e,this.flowKey);l&&manywho.component.onOutcome(l,null,this.flowKey)}this.forceUpdate()}},t.prototype.sort=function(e){this.sortItem=e.currentTarget.getAttribute("data-column-name"),this.sortDirection&&"ASC"==this.sortDirection?this.sortDirection="DESC":this.sortDirection="ASC",this.forceUpdate()},t.prototype.toggleSelectAll=function(e){if(e.currentTarget.checked)for(var t=manywho.model.getComponent(this.componentId,this.flowKey),o=0;o<t.objectData.length;o++){var n=t.objectData[o],r=manywho.utils.getObjectDataProperty(n.properties,this.getAttribute("Row Key")).contentValue;this.selectedItems.indexOf(r)<0&&this.selectedItems.push(r)}else this.selectedItems=[];return this.forceUpdate(),!1},t.prototype.selectRow=function(e,t){0==manywho.model.getComponent(this.componentId,this.flowKey).isMultiSelect&&(this.selectedItems=[]),this.selectedItems.indexOf(t.currentTarget.getAttribute("data-rowId"))<0&&this.selectedItems.push(t.currentTarget.getAttribute("data-rowId")),this.triggerOutcome(e,t),this.forceUpdate()},t.prototype.toggleSelectItem=function(e){var t=e.currentTarget.getAttribute("data-rowId")||e.currentTarget.parentElement.parentElement.getAttribute("data-rowId");if(this.selectedItems.indexOf(t)<0)this.selectedItems.push(t);else{var o=this.selectedItems.indexOf(t);this.selectedItems.splice(o,1)}e.stopPropagation(),this.forceUpdate()},t.prototype.getObjectDataByKey=function(e,t,o){for(var n,r=0;r<e.length;r++)if(n=e[r],manywho.utils.getObjectDataProperty(n.properties,t).contentValue==o)return n;return null},t}(r.Component);manywho.component.register("EnhancedTable",a),t.default=a},function(e,t){e.exports=React},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,